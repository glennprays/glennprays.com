name: Deploy Next.js site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v3
        with:
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      - name: Install Nix
        uses: cachix/install-nix-action@v22
        with:
            nix_path: nixpkgs=channel:nixos-unstable

      - name: Install dependencies, build, and export
        run: |
            # --- Start of TMPDIR fix (keep this) ---
            # This will now correctly point to a location on your persistent disk
            export TMPDIR=$GITHUB_WORKSPACE/runner-tmp
            mkdir -p "$TMPDIR" # Use quotes for safety
            echo "Set TMPDIR to: $TMPDIR"
            # --- End of TMPDIR fix ---
            #

            nix shell \
                nixpkgs#nodejs_20 \
                nixpkgs#playwright \
                nixpkgs#chromium \
                --extra-experimental-features "nix-command flakes" \
                --impure \
                --command bash -c '
                echo "Running inside nix shell..."
                echo "Node version: $(node -v)"
                echo "NPM version: $(npm -v)"

                # Use system Chromium for Playwright
                export PLAYWRIGHT_SKIP_VALIDATE_HOST_REQUIREMENTS=true
                export CHROMIUM_PATH=$(command -v chromium)
                echo "Using system Chromium at: $CHROMIUM_PATH"

                # Optionally tell your app where Chromium is
                export CHROMIUM_EXECUTABLE_PATH=$CHROMIUM_PATH

                # Install dependencies and build
                npm ci --loglevel verbose
                npm run build
            '
            # --- End of Nix Flake fix ---

            # Clean up the temporary flake file
            rm -rf shell-flake
            echo "Cleaned up temporary shell-flake.nix and shell-flake.lock"

      - name: List files
        run: ls -alh

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          path: ./out

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: self-hosted
    needs: build

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2