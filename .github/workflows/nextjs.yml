name: Deploy Next.js site to Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: self-hosted 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v3
        with:
          static_site_generator: next

      - name: Restore cache
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json', '**/yarn.lock') }}-

      # --- REMOVE: Nix installation step ---
      # - name: Install Nix
      #   uses: cachix/install-nix-action@v22
      #   with:
      #       nix_path: nixpkgs=channel:nixos-unstable

      # --- ADD: Standard Node.js setup ---
      # This action sets up Node.js from the standard distribution
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*' # Use the latest LTS version, or specify '20.x' etc.

      # --- ADD: Install system dependencies for Chromium/Puppeteer ---
      # This assumes your self-hosted runner is a Linux distribution (like Debian/Ubuntu)
      # and you have sudo access to install packages.
      # The packages listed cover common dependencies for headless Chrome/Puppeteer.
      # Adjust package names if your runner uses a different package manager (e.g., yum, pacman).
      - name: Install Chromium and dependencies (for Puppeteer)
        run: |
          # Update package lists
          sudo apt-get update
          # Install chromium-browser and common dependencies required for headless execution
          # This list is based on common requirements and packages mentioned in your Nix list
          sudo apt-get install -y \
            libnss3 \
            libfontconfig1 \
            libdbus-1-3 \
            libatk-bridge2.0-0 \
            libgtk-3-0 \
            libcups2 \
            libxkbcommon0 \
            libatspi2.0-0 \
            libgbm1 \
            libgl1 \
            libxcomposite1 \
            libxrandr2 \
            libxi6 \
            libasound2

      # --- MODIFIED: Install dependencies, build, and export ---
      # Replaces the Nix shell command with standard shell execution
      - name: Install dependencies, build, and export
        run: |
            # --- TMPDIR fix (keep this) ---
            # This is not Nix-specific and might still be needed in constrained environments.
            export TMPDIR=$GITHUB_WORKSPACE/runner-tmp
            mkdir -p "$TMPDIR"
            echo "Set TMPDIR to: $TMPDIR"

            # --- Puppeteer Configuration (using system installed Chromium) ---
            # Find the executable path of the system-installed chromium-browser or chromium
            # command -v searches the system's PATH
            # CHROMIUM_PATH=$(command -v chromium-browser || command -v chromium || echo "/usr/bin/chromium")
            # # Set PUPPETEER_SKIP_DOWNLOAD to true so it doesn't try to download
            # export PUPPETEER_SKIP_DOWNLOAD=true
            # # Point Puppeteer and your script (via CHROMIUM_EXECUTABLE_PATH) to the system browser
            # export PUPPETEER_EXECUTABLE_PATH="$CHROMIUM_PATH"
            # export CHROMIUM_EXECUTABLE_PATH="$CHROMIUM_PATH" # This matches your Node.js code variable
            # echo "Using Chromium at: $CHROMIUM_EXECUTABLE_PATH"

            # --- Fontconfig configuration ---
            # When installing fontconfig via apt-get, system configuration is usually handled.
            # Explicitly setting FONTCONFIG_PATH and FONTCONFIG_FILE is usually not necessary
            # outside of a Nix shell or minimal environment, and can be removed here.
            # Removed: export FONTCONFIG_PATH=...
            # Removed: export FONTCONFIG_FILE=...
            # Removed: mkdir/ln commands

            # Install Node.js dependencies using npm ci (clean install)
            npm ci --loglevel verbose

            # Run the Next.js build script
            npm run build

      - name: List files
        run: ls -alh

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: github-pages
          path: ./out # Ensure this matches your Next.js export directory, typically 'out'

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: self-hosted # Your self-hosted runner
    needs: build

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        # The artifact is automatically retrieved by actions/deploy-pages